{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "identity",
    "node",
    "persistent_dir",
    "publisher"
  ],
  "properties": {
    "admin_token": {
      "description": "HTTP authorization bearer token for accessing publisher admin endpoints. If None, remote admin operations will be disabled (only self-publish on this node will work since there will be no way to register publishing identities).",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/AdminToken"
        },
        {
          "type": "null"
        }
      ]
    },
    "api_bind_addrs": {
      "description": "Addresses for client interaction - resolver lookups, publishing, and admin. Required for publisher and resolver.  This serves both token-protected and public endpoints.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/StrSocketAddr"
      }
    },
    "content": {
      "description": "Additionally act as a server for http content (static files or reverse proxy) with a `.s` tls cert.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/ContentConfig"
      }
    },
    "global_addrs": {
      "description": "How to determine the public ip for publisher announcements and self-publishing. Publisher announcements always use the first address.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/GlobalAddrConfig"
      }
    },
    "identity": {
      "description": "A backed identity (by file or card) this server will use for generating a tls cert for the api, and for self-publication if the publisher is enabled.",
      "allOf": [
        {
          "$ref": "#/definitions/BackedIdentityArg"
        }
      ]
    },
    "node": {
      "description": "Core DHT node config, for publishing and looking up addresses",
      "allOf": [
        {
          "$ref": "#/definitions/NodeConfig"
        }
      ]
    },
    "persistent_dir": {
      "description": "Path to a dir for subsystems to store persistent data (mostly sqlite databases). Will be created if it doesn't exist.",
      "type": "string"
    },
    "publisher": {
      "description": "Configure publisher - must be enabled because api tls certs refer to the node's address and so the node must self-publish.",
      "allOf": [
        {
          "$ref": "#/definitions/PublisherConfig"
        }
      ]
    },
    "resolver": {
      "description": "Specify to enable resolver functionality.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/ResolverConfig"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "AdminToken": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "file"
          ],
          "properties": {
            "file": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "inline"
          ],
          "properties": {
            "inline": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BackedIdentityArg": {
      "description": "An identity with its associated secret.",
      "oneOf": [
        {
          "description": "A file containing a generated key",
          "type": "object",
          "required": [
            "local"
          ],
          "properties": {
            "local": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BootstrapConfig": {
      "type": "object",
      "required": [
        "addr",
        "ident"
      ],
      "properties": {
        "addr": {
          "description": "Peer address.",
          "allOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            }
          ]
        },
        "ident": {
          "description": "Node ID at that address.",
          "allOf": [
            {
              "$ref": "#/definitions/NodeIdentity"
            }
          ]
        }
      }
    },
    "ContentConfig": {
      "type": "object",
      "required": [
        "bind_addrs"
      ],
      "properties": {
        "bind_addrs": {
          "description": "Interface IPs and ports to bind to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        },
        "mode": {
          "description": "What content to serve",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/ServeMode"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "DnsBridgeConfig": {
      "type": "object",
      "properties": {
        "tcp_bind_addrs": {
          "description": "TCP for DNS over TLS. Please set up your own TLS reverse proxy.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        },
        "udp_bind_addrs": {
          "description": "Normal DNS - typically port 53.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        }
      }
    },
    "GlobalAddrConfig": {
      "oneOf": [
        {
          "description": "Use this if you know the IP address beforehand (ex: in terraform, if you allocate a floating ip before provisioning this host) and it's not the address of any local interface.",
          "type": "object",
          "required": [
            "fixed"
          ],
          "properties": {
            "fixed": {
              "type": "string",
              "format": "ip"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "If your server is directly on the internet (with an externally reachable IP configured on an interface) this will cause that IP to be used. Specify an interface name (ex: `eth0`) or leave blank to scan all interfaces for a public IP.  All ipv6 addresses are considered public.",
          "type": "object",
          "required": [
            "from_interface"
          ],
          "properties": {
            "from_interface": {
              "type": "object",
              "properties": {
                "ip_version": {
                  "description": "Restrict to ip addresses of this version; unrestricted if empty.",
                  "default": null,
                  "anyOf": [
                    {
                      "$ref": "#/definitions/IpVer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "name": {
                  "description": "Restrict to an interface with this name (like `eth0`); unrestricted if empty.",
                  "default": null,
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Look up a socket address via a remote service (ex: whatismyip). The service must reply with the ip address as plain text.",
          "type": "object",
          "required": [
            "lookup"
          ],
          "properties": {
            "lookup": {
              "$ref": "#/definitions/GlobalAddrLookupConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GlobalAddrLookupConfig": {
      "type": "object",
      "required": [
        "lookup"
      ],
      "properties": {
        "contact_ip_ver": {
          "description": "Which ip protocol to use to contact lookup server (hence: which ip ver the lookup server will see and return).  If empty, use any ip version.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/IpVer"
            },
            {
              "type": "null"
            }
          ]
        },
        "lookup": {
          "description": "Host to look up address on.",
          "type": "string"
        }
      }
    },
    "IpVer": {
      "type": "string",
      "enum": [
        "v4",
        "v6"
      ]
    },
    "NodeConfig": {
      "type": "object",
      "required": [
        "bind_addr"
      ],
      "properties": {
        "bind_addr": {
          "description": "The address the node will listen on (UDP).",
          "allOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            }
          ]
        },
        "bootstrap": {
          "description": "A list of peers to use to bootstrap the connection.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/BootstrapConfig"
          }
        }
      }
    },
    "NodeIdentity": {
      "description": "A node identity (zbase32 string)",
      "type": "string"
    },
    "PublisherConfig": {
      "type": "object",
      "required": [
        "bind_addr"
      ],
      "properties": {
        "advertise_port": {
          "description": "Port the publisher is externally reachable on, for advertisements (if different from bind port).",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "bind_addr": {
          "description": "Port to bind for serving published data to other nodes",
          "allOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            }
          ]
        }
      }
    },
    "ResolverConfig": {
      "type": "object",
      "properties": {
        "dns_bridge": {
          "description": "Specify to enable the DNS bridge.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/DnsBridgeConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_cache": {
          "description": "Maximum number of entries (identity, key pairs) in resolver cache.",
          "default": null,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "ServeMode": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "static_files"
          ],
          "properties": {
            "static_files": {
              "type": "object",
              "required": [
                "content_dir"
              ],
              "properties": {
                "content_dir": {
                  "description": "Where files to serve are",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "reverse_proxy"
          ],
          "properties": {
            "reverse_proxy": {
              "type": "object",
              "required": [
                "upstream_url"
              ],
              "properties": {
                "upstream_url": {
                  "description": "Base url of upstream HTTP server. The request path is appended.",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StrSocketAddr": {
      "description": "An ip address or domain (ex: \"localhost\") which resolves to an address",
      "type": "string"
    }
  }
}