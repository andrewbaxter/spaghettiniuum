{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "properties": {
    "api": {
      "description": "An HTTPS server for all client interaction except DNS: resolving, publishing, and administration. It is disabled if not present or null, but to enable it with defaults you can provide an empty config.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/ApiConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "cache_dir": {
      "description": "Where cache files will be placed. If not specified, uses a default directory based on the `CACHE_DIRECTORY` environment variable.",
      "type": [
        "string",
        "null"
      ]
    },
    "content": {
      "description": "Additionally serve more HTTP content, using the host cert.",
      "default": null,
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/ContentConfig"
      }
    },
    "global_addrs": {
      "description": "How to determine the public ip for publisher announcements and self-publishing. Publisher announcements always use the first address.\n\nIf empty, defaults to using a gobal IPv6 address found on any interface.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/GlobalAddrConfig"
      }
    },
    "identity": {
      "description": "An identity secret this server will use for generating a TLS cert for the api, and for self-publication if the publisher is enabled.\n\nIf not specified, an identity will be generated at `host.ident` in the data directory.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/IdentitySecretArg"
        },
        {
          "type": "null"
        }
      ]
    },
    "node": {
      "description": "Configuration for the core node. The core node is the DHT participant, used by the publisher and resolver (always enabled).",
      "default": {
        "bind_addr": null,
        "bootstrap": null
      },
      "allOf": [
        {
          "$ref": "#/definitions/NodeConfig"
        }
      ]
    },
    "persistent_dir": {
      "description": "Where persistent files will be placed. You may want to back this up periodically. If not specified, uses a default directory based on the `DATA_DIRECTORY` environment variable.",
      "type": [
        "string",
        "null"
      ]
    },
    "publisher": {
      "description": "The publisher (as named) allows publishing records.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/PublisherConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "resolver": {
      "description": "The resolver (as named) resolves records for clients. It is exposed on the API server along with other APIs.",
      "default": null,
      "anyOf": [
        {
          "$ref": "#/definitions/ResolverConfig"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "AdminToken": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "file"
          ],
          "properties": {
            "file": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "inline"
          ],
          "properties": {
            "inline": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AdnSocketAddr": {
      "description": "Either just an IP address (and port) as it would appear as in a URL host part (IPv6 surrounded by `[]`), followed by `#` then the ADN (authentication domain name - that will appear on the server's TLS certificate). Default ports may change based on the context and presence of the ADN.",
      "type": "string"
    },
    "ApiConfig": {
      "type": "object",
      "properties": {
        "admin_token": {
          "description": "HTTP authorization bearer token for accessing publisher admin endpoints.\n\nIf not specified, remote admin operations will be disabled (only self-publish on this node will work since there will be no way to register publishing identities).",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/AdminToken"
            },
            {
              "type": "null"
            }
          ]
        },
        "bind_addrs": {
          "description": "Addresses for the server to listen on for client interaction.\n\nDefaults to `[::]:12434` and `0:12434`.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        }
      }
    },
    "BootstrapConfig": {
      "type": "object",
      "required": [
        "addr",
        "ident"
      ],
      "properties": {
        "addr": {
          "description": "Peer address.",
          "allOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            }
          ]
        },
        "ident": {
          "description": "Node ID at that address.",
          "allOf": [
            {
              "$ref": "#/definitions/NodeIdentity"
            }
          ]
        }
      }
    },
    "ContentConfig": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "description": "Mapping of interface IPs and ports to bind to to subpaths to content to serve.\n\nRegardless of port this always serves HTTPS. For HTTP traffic you can use some other static file server.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ServeMode"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "DnsBridgeConfig": {
      "type": "object",
      "properties": {
        "synthetic_self_record": {
          "description": "Create a synthetic A/AAAA record with this name pointing to this host. This uses the global addresses specified in the root config.",
          "default": null,
          "type": [
            "string",
            "null"
          ]
        },
        "tcp_bind_addrs": {
          "description": "DNS over TLS. Uses a self-provisioned spaghettinuum certificate.\n\nDefaults to `[::]:853` and `0:853` if not specified; set to an empty list to disable.",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        },
        "udp_bind_addrs": {
          "description": "Normal UDP DNS (Do53).\n\nDefaults to `[::]:53` and `0:53` if not specified; set to an empty list to disable.",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/StrSocketAddr"
          }
        },
        "upstream": {
          "description": "Upstream resolvers, such as for non-`.s` names. Each address port defaults to port 53 if no ADN, otherwise 853. If not specified, uses system resolvers.",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AdnSocketAddr"
          }
        }
      }
    },
    "GlobalAddrConfig": {
      "oneOf": [
        {
          "description": "Use this if you know the IP address beforehand (ex: in terraform, if you allocate a floating ip before provisioning this host) and it's not the address of any local interface.",
          "type": "object",
          "required": [
            "fixed"
          ],
          "properties": {
            "fixed": {
              "type": "string",
              "format": "ip"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "If your server is directly on the internet (with an externally reachable IP configured on an interface) this will cause that IP to be used. Specify an interface name (ex: `eth0`) or leave blank to scan all interfaces for a public IP.  All ipv6 addresses are considered public.",
          "type": "object",
          "required": [
            "from_interface"
          ],
          "properties": {
            "from_interface": {
              "type": "object",
              "properties": {
                "ip_version": {
                  "description": "Restrict to ip addresses of this version; unrestricted if empty.",
                  "default": null,
                  "anyOf": [
                    {
                      "$ref": "#/definitions/IpVer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "name": {
                  "description": "Restrict to an interface with this name (like `eth0`); unrestricted if empty.",
                  "default": null,
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Look up a socket address via a remote service (ex: whatismyip). The service must reply with the ip address as plain text.",
          "type": "object",
          "required": [
            "lookup"
          ],
          "properties": {
            "lookup": {
              "$ref": "#/definitions/GlobalAddrLookupConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GlobalAddrLookupConfig": {
      "type": "object",
      "required": [
        "lookup"
      ],
      "properties": {
        "contact_ip_ver": {
          "description": "Which ip protocol to use to contact lookup server (hence: which ip ver the lookup server will see and return).  If empty, use any ip version.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/IpVer"
            },
            {
              "type": "null"
            }
          ]
        },
        "lookup": {
          "description": "Host to look up address on.",
          "type": "string"
        }
      }
    },
    "IdentitySecretArg": {
      "description": "An identity with its associated secret.",
      "oneOf": [
        {
          "description": "A file containing a generated key",
          "type": "object",
          "required": [
            "local"
          ],
          "properties": {
            "local": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IpVer": {
      "type": "string",
      "enum": [
        "v4",
        "v6"
      ]
    },
    "NodeConfig": {
      "type": "object",
      "properties": {
        "bind_addr": {
          "description": "The address the node will listen on (UDP).\n\nDefaults to `[::]:48390` - any open port on any IPv6 interface.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            },
            {
              "type": "null"
            }
          ]
        },
        "bootstrap": {
          "description": "A list of peers to use to bootstrap the connection.\n\nDefaults to the current `antipasta` node at time of build.",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/BootstrapConfig"
          }
        }
      }
    },
    "NodeIdentity": {
      "description": "A node identity (zbase32 string)",
      "type": "string"
    },
    "PublisherConfig": {
      "type": "object",
      "properties": {
        "advertise_port": {
          "description": "Port the publisher is externally reachable on, for advertisements (if different from bind port).",
          "default": null,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "bind_addr": {
          "description": "Port to bind for serving published data to other nodes\n\nDefaults to `[::]:48391` - any open port on any IPv6 interface.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/StrSocketAddr"
            },
            {
              "type": "null"
            }
          ]
        },
        "ssh_host_keys": {
          "description": "A list of paths to SSH host keys to self-publish for this host.\n\nIf not specified at all, a default SSH host key location will be used. If an empty list is provided no SSH host keys will be published.",
          "default": null,
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResolverConfig": {
      "type": "object",
      "properties": {
        "dns_bridge": {
          "description": "The DNS bridge exposes specific spaghettinuum `dns/` records over DNS.",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/DnsBridgeConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_cache": {
          "description": "Maximum number of entries (identity, key pairs) in resolver cache.",
          "default": null,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "ServeMode": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "static_files"
          ],
          "properties": {
            "static_files": {
              "type": "object",
              "required": [
                "content_dir"
              ],
              "properties": {
                "content_dir": {
                  "description": "Where files to serve are.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "reverse_proxy"
          ],
          "properties": {
            "reverse_proxy": {
              "type": "object",
              "required": [
                "upstream_url"
              ],
              "properties": {
                "upstream_url": {
                  "description": "Base url of upstream HTTP server. The request path is appended.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StrSocketAddr": {
      "description": "An ip address or domain (ex: \"localhost\") which resolves to an address",
      "type": "string"
    }
  }
}